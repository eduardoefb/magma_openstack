controller:
  image:
    repository: {{ registry.url }}.{{ domain }}/{{ registry.project }}/controller
    tag: 1.8.0
  podDisruptionBudget:
    enabled: true
  replicas: 2
  spec:
    database:
      driver: postgres # mysql/postgres
      sql_dialect: psql # maria/psql
      db: postgres # DB Name
      protocol: tcp
      host: orc8rdb
      port: 5432
      user: postgres
      pass: {{ orc8r_psql_pass }}
imagePullSecrets:
- name: artifactory
logging:
  enabled: false
metrics:
  alertmanager:
    create: true
  alertmanagerConfigurer:
    alertmanagerURL: orc8r-alertmanager:9093
    create: true
    image:
      repository: docker.io/facebookincubator/alertmanager-configurer
      tag: 1.0.4
  grafana:
    create: false
  imagePullSecrets:
  - name: artifactory
  metrics:  
    volumes:
      prometheusData:
        volumeSpec:
          emptyDir: {}
      prometheusConfig:
        volumeSpec:
          storageClassName: nfs-provisioner
          accessModes: [ "ReadWriteOnce" ]
          resources:
            requests:
              storage: 8Gi            
  prometheus:
    create: true
    includeOrc8rAlerts: true
  prometheusCache:
    create: true
    image:
      repository: docker.io/facebookincubator/prometheus-edge-hub
      tag: 1.1.0
    limit: 500000
  prometheusConfigurer:
    create: true
    image:
      repository: docker.io/facebookincubator/prometheus-configurer
      tag: 1.0.4
    prometheusURL: orc8r-prometheus:9090
  thanos:
    enabled: false
  userGrafana:
    create: true
    image:
      repository: docker.io/grafana/grafana
      tag: 6.6.2
    volumes:
      dashboardproviders:
        persistentVolumeClaim:
          claimName: grafanaproviders
      dashboards:
        persistentVolumeClaim:
          claimName: grafanadashboards
      datasources:
        persistentVolumeClaim:
          claimName: grafanadatasources
      grafanaData:
        persistentVolumeClaim:
          claimName: grafanadata
nginx:
  create: true
  image:
    repository: {{ registry.url }}.{{ domain }}/{{ registry.project }}/nginx
    tag: 1.8.0
  podDisruptionBudget:
    enabled: true
  replicas: 2
  service:
    enabled: true
    extraAnnotations:
      bootstrapLagacy:
        external-dns.alpha.kubernetes.io/hostname: bootstrapper-controller.{{ domain }}
      clientcertLegacy:
        external-dns.alpha.kubernetes.io/hostname: controller.{{ domain }}
      proxy:
        external-dns.alpha.kubernetes.io/hostname: api.{{ domain }}
    legacyEnabled: true
    name: orc8r-bootstrap-legacy
    type: LoadBalancer
  spec:
    hostname: controller.{{ domain }}
    resolver: coredns.kube-system.svc.cluster.local valid=10s
    #resolver: kube-dns.kube-system.svc.cluster.local valid=10s
                  
nms:
  enabled: true
  imagePullSecrets:
  - name: artifactory
  magmalte:
    env:
      api_host: api.{{ domain }}
      grafana_address: orc8r-user-grafana:3000
      mysql_db: postgres
      mysql_host: nmsdb
      mysql_pass: {{ nms_psql_pass }}
      mysql_dialect: postgres
      mysql_user: postgres
      
    image:
      pullPolicy: IfNotPresent
      repository: {{ registry.url }}.{{ domain }}/{{ registry.project }}/magmalte
      tag: 1.8.0
    manifests:
      deployment: true
      rbac: false
      secrets: true
      service: false
  nginx:
    create: true
    deployment:
      spec:
        ssl_cert_name: nms_nginx.pem
        ssl_cert_key_name: nms_nginx.key.pem
    manifests:
      configmap: true
      deployment: true
      rbac: false
      secrets: true
      service: true
    service:
      annotations:
        external-dns.alpha.kubernetes.io/hostname: '*.nms.{{ domain }}'
      type: LoadBalancer
  secret:
    certs: orc8r-secrets-certs

secret:
  configs:
    orc8r: orc8r-secrets-configs-orc8r
  envdir: orc8r-secrets-envdir
  certs: orc8r-secrets-certs  
secrets:
  create: false



# certs sub-chart configuration
certs:
  create: false
  domainName: localhost

orchestrator:
  service:
    labels:
      orc8r.io/analytics_collector: "true"
      orc8r.io/mconfig_builder: "true"
      orc8r.io/metrics_exporter: "true"
      orc8r.io/obsidian_handlers: "true"
      orc8r.io/state_indexer: "true"
      orc8r.io/stream_provider: "true"
      orc8r.io/swagger_spec: "true"
    annotations:
      orc8r.io/state_indexer_types: "directory_record"
      orc8r.io/state_indexer_version: "1"
      orc8r.io/stream_provider_streams: "configs"
      orc8r.io/obsidian_handlers_path_prefixes: >
        /,
        /magma/v1/channels,
        /magma/v1/networks,
        /magma/v1/networks/:network_id,

tenants:
  service:
    labels:
      orc8r.io/obsidian_handlers: "true"
      orc8r.io/swagger_spec: "true"
    annotations:
      orc8r.io/obsidian_handlers_path_prefixes: >
        /magma/v1/tenants,
        /magma/v1/tenants/:tenants_id,

eventd:
  service:
    labels:
      orc8r.io/obsidian_handlers: "true"
      orc8r.io/swagger_spec: "true"
    annotations:
      orc8r.io/obsidian_handlers_path_prefixes: >
        /magma/v1/networks/:network_id/logs,
        /magma/v1/events,

ctraced:
  service:
    labels:
      orc8r.io/obsidian_handlers: "true"
      orc8r.io/swagger_spec: "true"
    annotations:
      orc8r.io/obsidian_handlers_path_prefixes: >
        /magma/v1/networks/:network_id/tracing,
