---
# tasks file for 01-image_builder
- include_vars: "{{ playbook_dir }}/vars.yml" 
- include_vars: "{{ playbook_dir }}/magma_config.yml"  

- name: Delete .kube directory
  file:
    path: /home/debian/.kube
    state: absent

- name: Create .kube directory
  file:
    path: /home/debian/.kube
    state: directory
    
- name: Copy credentials
  copy:
    src: "{{ kubeconfig_file }}"
    dest: /home/debian/.kube/config
    mode: '0400'

- name: Install elasticsearch custom resource definitions
  shell: |
    if [ `kubectl -n elastic-system get statefulset | grep -P '\s+(\d+)/\1\s+' | wc -l` -eq 0 ]; then
      kubectl create -f https://download.elastic.co/downloads/eck/2.8.0/crds.yaml
    fi
  register: attempt
  retries: 600
  delay: 10
  until: attempt is success    

- name: Install the operator with its RBAC rules
  shell: kubectl apply -f https://download.elastic.co/downloads/eck/2.8.0/operator.yaml
  register: attempt
  retries: 600
  delay: 10
  until: attempt is success   

- name: Wait until operator is up
  shell: |
    while kubectl -n elastic-system get statefulset | grep -vP '\s+(\d+)/\1\s+' | grep -v NAME; do
      sleep 1
    done

- name: Remove directory
  file: 
    path: /home/debian/magma
    state: absent

- name: Clone magma repository
  git:
    repo: https://github.com/magma/magma.git
    dest: /home/debian/magma
    version: "{{ branch }}"
  register: git_res
  retries: 80
  delay: 5
  until: git_res is success       

- name: Check if kubernetes cluster is running
  shell: kubectl get namespaces
  register: check_kubectl
  retries: 300
  delay: 30
  until: check_kubectl is success

- name: Delete namespace if exists
  ignore_errors: true
  shell: kubectl delete namespace {{ namespace }}

- name: Create namespace
  shell: kubectl create namespace {{ namespace }}

- name: Install Elasticsearch
  shell: |
    cat <<EOF | kubectl -n {{ namespace }} apply -f -
    apiVersion: elasticsearch.k8s.elastic.co/v1
    kind: Elasticsearch
    metadata:
      name: {{ prefix }}
    spec:
      version: 8.8.0
      nodeSets:
      - name: default
        count: 1
        config:
          node.store.allow_mmap: false
    EOF

- name: Wait for Elasticsearch
  shell: |
    while ! kubectl -n {{ namespace }} get elasticsearch | grep green; do
      sleep 1
    done

- name: Install Kibana
  shell: |
    cat <<EOF | kubectl -n {{ namespace }} apply -f -
    apiVersion: kibana.k8s.elastic.co/v1
    kind: Kibana
    metadata:
      name: {{ prefix }}
    spec:
      version: 8.8.0
      count: 1
      elasticsearchRef:
        name: {{ prefix }}
    EOF

- name: Wait for Kibana
  shell: |
    while ! kubectl -n {{ namespace }} get kibana | grep green; do
      sleep 1
    done


- name: Disable Elasticsearch ssl and authentication
  shell: |
    kubectl patch -n {{ namespace }} elasticsearch orc8r --type merge -p '{"spec": {"http": {"tls": {"selfSignedCertificate": {"disabled": true}}}}}'  

    cat << EOF > /tmp/patch.yml
    spec:
      nodeSets:
      - config:
          node.store.allow_mmap: false
          xpack.security.authc:
            anonymous:
              authz_exception: false
              roles: superuser
              username: anonymous      
        count: 1
        name: default
    EOF

    kubectl -n {{ namespace }} patch elasticsearch orc8r --type merge --patch "$(cat /tmp/patch.yml)"

- name: Create the Elasticsearch service
  shell: |
    kubectl -n {{ namespace }}  expose service {{ prefix }}-es-http --type ClusterIP --name elasticsearch-logging
    kubectl -n {{ namespace }}  expose service {{ prefix }}-es-http --type ClusterIP --name elasticsearch-master
    kubectl -n {{ namespace }}  expose service {{ prefix }}-kb-http --type LoadBalancer --name  kibana-http-external

- name: Add bitnami repo
  shell: helm repo add bitnami https://charts.bitnami.com/bitnami

- name: Install orchestrator db
  shell: helm -n {{ namespace }} install orc8rdb bitnami/postgresql --set livenessProbe.initialDelaySeconds=300,fullnameOverride=orc8rdb --wait --timeout 3600s
  
- name: Install nms db
  shell: helm -n {{ namespace }} install nmsdb bitnami/postgresql --set livenessProbe.initialDelaySeconds=300,fullnameOverride=nmsdb  --wait --timeout 3600s
          
- name: Clear certificate directory
  file:
    path: /home/debian/certs
    state: absent

- name: Transfer the certificates 
  copy:
    src: "{{ playbook_dir }}/certs"
    dest: /home/debian/

- name: Clear certificate directory
  file:
    path: /home/debian/magma/orc8r/cloud/helm/orc8r/charts/secrets/.secrets/certs/
    state: absent

- name: Create certificate directory
  file:
    path: /home/debian/magma/orc8r/cloud/helm/orc8r/charts/secrets/.secrets/certs/
    state: directory

- name: Create the kubernetes secrets
  shell: |
    cd /home/debian/magma/orc8r/cloud/helm/orc8r
    cp -r /home/debian/certs/* charts/secrets/.secrets/certs/. 
    helm template orc8r charts/secrets \
      --namespace {{ namespace }} \
      --set-string secret.certs.enabled=true \
      --set-file secret.certs.files."rootCA\.pem"=charts/secrets/.secrets/certs/rootCA.pem \
      --set-file secret.certs.files."bootstrapper\.key"=charts/secrets/.secrets/certs/bootstrapper.key \
      --set-file secret.certs.files."controller\.crt"=charts/secrets/.secrets/certs/controller.crt \
      --set-file secret.certs.files."controller\.key"=charts/secrets/.secrets/certs/controller.key \
      --set-file secret.certs.files."admin_operator\.pem"=charts/secrets/.secrets/certs/admin_operator.pem \
      --set-file secret.certs.files."admin_operator\.key\.pem"=charts/secrets/.secrets/certs/admin_operator.key.pem \
      --set-file secret.certs.files."certifier\.pem"=charts/secrets/.secrets/certs/certifier.pem \
      --set-file secret.certs.files."certifier\.key"=charts/secrets/.secrets/certs/certifier.key \
      --set-file secret.certs.files."nms_nginx\.pem"=charts/secrets/.secrets/certs/nms_nginx.pem \
      --set-file secret.certs.files."nms_nginx\.key\.pem"=charts/secrets/.secrets/certs/nms_nginx.key \
      --set-file secret.certs.files."fluentd\.key"=charts/secrets/.secrets/certs/fluentd.key \
      --set-file secret.certs.files."fluentd\.pem"=charts/secrets/.secrets/certs/fluentd.pem \
      --set-file secret.certs.files."dp_fluentd\.key"=charts/secrets/.secrets/certs/dp_fluentd.key \
      --set-file secret.certs.files."dp_fluentd\.pem"=charts/secrets/.secrets/certs/dp_fluentd.pem \
      --set=docker.registry={{ registry.url }} \
      --set=docker.username="{{ registry.username }}" \
      --set=docker.password="{{ registry.password }}" |
      kubectl apply -f -    

- name: Get psql vars for orc8r 
  shell: | 
    kubectl get secret --namespace {{ namespace }} orc8rdb -o jsonpath="{.data.postgres-password}" | base64 --decode
  register:
    orc8r_psql_pw

- name: Get psql vars for nms 
  shell: |       
    kubectl get secret --namespace {{ namespace }} nmsdb -o jsonpath="{.data.postgres-password}" | base64 --decode
  register:
     nms_psql_pw      

- name: Clear helm directory
  file:
    dest: /tmp/helm 
    state: absent

- name: Define values for orc8r
  template:
    src: values.yml.j2 
    dest: /home/debian/values.yaml
  vars:
    orc8r_psql_pass: "{{ orc8r_psql_pw.stdout }}"
    nms_psql_pass: "{{ nms_psql_pw.stdout }}"  

- name: Define values for nms
  template:
    src: values_nms.yml.j2 
    dest: /home/debian/magma/orc8r/cloud/helm/orc8r/charts/nms/values.yaml
  vars:
    orc8r_psql_pass: "{{ orc8r_psql_pw.stdout }}"
    nms_psql_pass: "{{ nms_psql_pw.stdout }}"      

- name: Define values for logging
  template:
    src: values_logging.yml.j2 
    dest: /home/debian/magma/orc8r/cloud/helm/orc8r/charts/logging/values.yaml
  vars:
    orc8r_psql_pass: "{{ orc8r_psql_pw.stdout }}"
    nms_psql_pass: "{{ nms_psql_pw.stdout }}"   

- name: Define values for orc8r-lte
  template:
    src: values_lte.yml.j2 
    dest: /home/debian/values_lte.yaml       
  vars:
    orc8r_psql_pass: "{{ orc8r_psql_pw.stdout }}"
    nms_psql_pass: "{{ nms_psql_pw.stdout }}"  

- name: Create prometheus pvcs
  shell: |
    storageclass=`kubectl get storageclass -o=jsonpath='{.items[?(@.metadata.annotations.storageclass\.kubernetes\.io/is-default-class=="true")].metadata.name}'`
    cat << EOF | kubectl -n {{ namespace }} create -f -
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: {{ item }}
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi
      storageClassName: ${storageclass}
    EOF
  loop:
    - prometheus-data
    - prometheus-config

- name: Deploy orc8r
  shell: | 
    cd /home/debian/magma/orc8r/cloud/helm/orc8r
    for f in `grep -lr -i 'policy/v1beta1'  *`; do sed -i 's|policy/v1beta1|policy/v1|g' $f; done
    helm dep update
    helm install {{ prefix }} --namespace {{ namespace }} . --values=/home/debian/values.yaml --wait --timeout 3600s
  args:
    executable: /bin/bash  

- name: Deploy orc8r-lte
  shell: | 
    cd /home/debian/magma/lte/cloud/helm/lte-orc8r
    for f in `grep -lr -i 'policy/v1beta1'  *`; do sed -i 's|policy/v1beta1|policy/v1|g' $f; done
    helm dep update    
    helm install {{ prefix }}-lte --namespace {{ namespace }} . --values=/home/debian/values_lte.yaml  --wait --timeout 3600s
  args:
    executable: /bin/bash   

- name: Renerate new key for magmalte
  shell: |
    cd /home/debian/magma/orc8r/cloud/helm/orc8r
    cert_pod=`kubectl -n {{ namespace }} get pod -l app.kubernetes.io/component=certifier -o jsonpath='{.items[0].metadata.name}'`
    kubectl -n {{ namespace }} exec -it ${cert_pod} -- envdir /var/opt/magma/envdir /var/opt/magma/bin/accessc add-admin -duration 3650 -cert admin_operator admin_operator
    kubectl -n {{ namespace }} cp ${cert_pod}:/admin_operator.key.pem charts/secrets/.secrets/certs/admin_operator.key.pem
    kubectl -n {{ namespace }} cp ${cert_pod}:/admin_operator.pem charts/secrets/.secrets/certs/admin_operator.pem
    

- name: Recreate the kubernetes secrets
  shell: |
    cd /home/debian/magma/orc8r/cloud/helm/orc8r
    helm template orc8r charts/secrets \
      --namespace {{ namespace }} \
      --set-string secret.certs.enabled=true \
      --set-file secret.certs.files."rootCA\.pem"=charts/secrets/.secrets/certs/rootCA.pem \
      --set-file secret.certs.files."bootstrapper\.key"=charts/secrets/.secrets/certs/bootstrapper.key \
      --set-file secret.certs.files."controller\.crt"=charts/secrets/.secrets/certs/controller.crt \
      --set-file secret.certs.files."controller\.key"=charts/secrets/.secrets/certs/controller.key \
      --set-file secret.certs.files."admin_operator\.pem"=charts/secrets/.secrets/certs/admin_operator.pem \
      --set-file secret.certs.files."admin_operator\.key\.pem"=charts/secrets/.secrets/certs/admin_operator.key.pem \
      --set-file secret.certs.files."certifier\.pem"=charts/secrets/.secrets/certs/certifier.pem \
      --set-file secret.certs.files."certifier\.key"=charts/secrets/.secrets/certs/certifier.key \
      --set-file secret.certs.files."nms_nginx\.pem"=charts/secrets/.secrets/certs/nms_nginx.pem \
      --set-file secret.certs.files."nms_nginx\.key\.pem"=charts/secrets/.secrets/certs/nms_nginx.key \
      --set-file secret.certs.files."fluentd\.key"=charts/secrets/.secrets/certs/fluentd.key \
      --set-file secret.certs.files."fluentd\.pem"=charts/secrets/.secrets/certs/fluentd.pem \
      --set-file secret.certs.files."dp_fluentd\.key"=charts/secrets/.secrets/certs/dp_fluentd.key \
      --set-file secret.certs.files."dp_fluentd\.pem"=charts/secrets/.secrets/certs/dp_fluentd.pem \
      --set=docker.registry={{ registry.url }} \
      --set=docker.username="{{ registry.username }}" \
      --set=docker.password="{{ registry.password }}" |
      kubectl apply -f -  
   
- name: Restart magma lte pods
  shell: |
    kubectl -n {{ namespace }} rollout restart deployment nms-magmalte

- name: Configure admin pass
  shell: |
    kubectl --namespace {{ namespace }} exec -it deploy/nms-magmalte -- yarn setAdminPassword host {{ magma.admin_user }} {{ magma.admin_pass }}
  register: passwd_set
  retries: 600
  delay: 10
  until: passwd_set is success
